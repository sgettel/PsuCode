      program getsynstar

c     program to read synthetic stellar spectra from Coelho et al. 2005 and 
c     pick the relevant wavelength range for the HRS

      integer teff
      real*8 logg,feh,afe,zero,dw,specblue(262144),specred(262144),
     .     wavblue(262144),wavred(262144),datarray(750901,2)
      character filename*80,filename0*80,bluefile*80,redfile*80
      
      close(40)
      close(41)
      close(42)

      open(40,file='gridlist.dat')

      do nmod=1,9999
         write(6,*) 'new file'
         read(40,"(a14)") filename0
         if(filename0(1:3).eq.'END') exit
         
         filename=filename0(1:14)//'.ms.fits'
         bluefile=filename0(1:14)//'_blue.dat'
         redfile=filename0(1:14)//'_red.dat'

         write(6,*) filename
         write(6,*) bluefile
         write(6,*) redfile

         write(6,*) 'calling readheaderc'
         call readheaderc(filename,naxis1,naxis2,zero,dw,teff,logg,feh,
     .        afe)
         write(6,*) 'calling readimagec'
         call readimagec(filename,datarray,npixels,norders,pmax,pmin)

         open(41,file=bluefile)
         open(42,file=redfile)

         nstartblue=54299
         nstartred=150500
         nendred=242400

         write(6,*) zero,dw
         write(6,*) 'start blue'
         do i=nstartblue,nstartred
            specblue(i-nstartblue+1)=datarray(i,1)
            wavblue(i-nstartblue+1)=zero+dw*(i-1)     
            write(41,*) wavblue(i-nstartblue+1),specblue(i-nstartblue+1)
         enddo
         
      

         write(6,*) 'start red'
         do i=nstartred,nendred
            specred(i-nstartred+1)=datarray(i,1)
            wavred(i-nstartred+1)=zero+dw*(i-1)
            write(42,*) wavred(i-nstartred+1),specred(i-nstartred+1)
         enddo
         write(6,*) 'end red'
      enddo

      close(40)
      close(41)
      close(42)

      end



C *************************************************************************
      subroutine readheaderc(filename,naxis1,naxis2,zero,dw,teff,logg,
     .     feh,afe)

      integer status,unit,readwrite,blocksize,teff
      real*8 logg,feh,afe,zero,dw
      character filename*80,value*68,record*80,comment*72

      

C  The STATUS parameter must always be initialized.
      status=0

C  Get an unused Logical Unit Number to use to open the FITS file.
      call ftgiou(unit,status)
      
C     open the FITS file, with read-only access 
      readwrite=0
      call ftopen(unit,filename,readwrite,blocksize,status)
      
C     Get the necessary header parameters

      call ftgkey(unit,'NAXIS1',value,comment,status)
      read(value,"(i6)") naxis1
      write(43,*) 'naxis1=',naxis1

      call ftgkey(unit,'NAXIS2',value,comment,status)
      read(value,"(i4)") naxis2
      write(43,*) 'naxis2=',naxis2

      call ftgkey(unit,'CRVAL1',value,comment,status)
      read(value,"(f12.6)") zero
      write(43,"(' zero=',f12.6)") zero

      call ftgkey(unit,'CD1_1',value,comment,status)
      read(value,"(f10.8)") dw
      write(43,"(' dw=',f10.8)") dw

      call ftgkey(unit,'TEFF',value,comment,status)
      read(value,"(i5)") teff
      write(43,"(' teff=',i5)") teff

      call ftgkey(unit,'LOG_G',value,comment,status)
      read(value,"(f6.3)") logg
      write(43,"(' logg=',f6.3)") logg

      call ftgkey(unit,'FEH',value,comment,status)
      read(value,"(f6.3)") feh
      write(43,"(' feh=',f6.3)") feh

      call ftgkey(unit,'AFE',value,comment,status)
      read(value,"(f6.3)") afe
      write(43,"(' afe=',f6.3)") afe

C  The FITS file must always be closed before exiting the program. 
C  Any unit numbers allocated with FTGIOU must be freed with FTFIOU.
      call ftclos(unit, status)
      call ftfiou(unit, status)

C  Check for any error, and if so print out error messages.
C  The PRINTERROR subroutine is listed near the end of this file.
      if (status .gt. 0)call printerror(status)
      


      end

C *************************************************************************

      subroutine printerror(status)

C  This subroutine prints out the descriptive text corresponding to the
C  error status value and prints out the contents of the internal
C  error message stack generated by FITSIO whenever an error occurs.

      integer status
      character errtext*30,errmessage*80

C  Check if status is OK (no error); if so, simply return
      if (status .le. 0)return

C  The FTGERR subroutine returns a descriptive 30-character text string that
C  corresponds to the integer error status number.  A complete list of all
C  the error numbers can be found in the back of the FITSIO User's Guide.
      call ftgerr(status,errtext)
      print *,'FITSIO Error Status =',status,': ',errtext

C  FITSIO usually generates an internal stack of error messages whenever
C  an error occurs.  These messages provide much more information on the
C  cause of the problem than can be provided by the single integer error
C  status value.  The FTGMSG subroutine retrieves the oldest message from
C  the stack and shifts any remaining messages on the stack down one
C  position.  FTGMSG is called repeatedly until a blank message is
C  returned, which indicates that the stack is empty.  Each error message
C  may be up to 80 characters in length.  Another subroutine, called
C  FTCMSG, is available to simply clear the whole error message stack in
C  cases where one is not interested in the contents.
      call ftgmsg(errmessage)
      do while (errmessage .ne. ' ')
          print *,errmessage
          call ftgmsg(errmessage)
      end do
      end


c ************************************************************************
      subroutine readimagec(filename,spectra,npixels,norders,pmax,pmin)

      parameter(maxpixels=750901,maxorders=2)
      integer status,unit,readwrite,blocksize,naxes(2),nfound
      integer group,firstpix,nbuffer,npixels,i
      real datamin,datamax,nullval,buffer(maxpixels)
      real*8 spectra(maxpixels,maxorders)
      logical anynull
      character filename*80

C  The STATUS parameter must always be initialized.
      status=0

C  Get an unused Logical Unit Number to use to open the FITS file.
      call ftgiou(unit,status)

C  Open the FITS file 
      readwrite=0
      call ftopen(unit,filename,readwrite,blocksize,status)

C  Determine the size of the image.
      call ftgknj(unit,'NAXIS',1,2,naxes,nfound,status)

C  Check that it found both NAXIS1 and NAXIS2 keywords.
      if (nfound .ne. 2)then
          print *,'READIMAGE failed to read the NAXISn keywords.'
          return
       endif

C  Initialize variables
      npixels=naxes(1)
      norders=naxes(2)
      group=1
      firstpix=1
      nullval=-999
      pmax=-1.e30
      pmin=1.e30

      do i=1,maxorders
          call ftgpve(unit,group,firstpix,npixels,nullval,buffer,
     .        anynull,status)
        do j=1,npixels
          spectra(j,i)=buffer(j)
          pmax=amax1(pmax,buffer(j))
          pmin=amin1(pmin,buffer(j))
        enddo
        firstpix=firstpix+npixels
      enddo

C  The FITS file must always be closed before exiting the program. 
C  Any unit numbers allocated with FTGIOU must be freed with FTFIOU.
      call ftclos(unit, status)
      call ftfiou(unit, status)

C  Check for any error, and if so print out error messages.
C  The PRINTERROR subroutine is listed near the end of this file.
      if (status .gt. 0)call printerror(status)
     
      end
